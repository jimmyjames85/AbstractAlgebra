package edu.iastate.math301;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeSet;

public class HW4
{

	
	public static int gcd(int a, int b)
	{
		if (a <= 0 || b <= 0)
			throw new IllegalArgumentException();

		BigInteger A = new BigInteger("" + a);
 		BigInteger B = new BigInteger("" + b);
		return Integer.parseInt(A.gcd(B).toString());
	}

	
	public static Set<Integer> units(int n)
	{
		if (n <= 0)
			throw new IllegalArgumentException();

		TreeSet<Integer> ret = new TreeSet<Integer>();

		for (int i = 1; i < n; i++)
			if (gcd(i, n) == 1)
				ret.add(i);

		return ret;
	}

	/**
	 * 
	 * @param a - generator
	 * @param n - modulus
	 * @return a cyclic set generated by a
	 */
	public static Set<Integer> generateMultiplicativeSetUnderZ_n(int a, int n)
	{
		if (a <= 0 || n <= 0)
			throw new IllegalArgumentException();

		TreeSet<Integer> ret = new TreeSet<Integer>();

		a = a % n;

		int cur = a;

		ret.add(cur);
		cur = cur * a % n;
		while (cur != a)
		{
			ret.add(cur);
			cur = cur * a % n;
		}

		return ret;
	}


	/**
	 * 
	 * @param a - generator
	 * @param n - modulus
	 * @return the order of a (-1 means infinite order)
	 */
	public static int orderOfA_UnderMultiplicativeSetUnderZ_n(int a, int n)
	{
		if (a <= 0 || n <= 0 || a > n)
			throw new IllegalArgumentException();

		int cur = a % n;
		int i = 1;
		while (cur != 1 && i <= n)
		{
			cur = cur * a % n;
			i++;
		}

		if (i == n + 1)
			i = -1;

		return i;
	}

	public static void main(String[] args)
	{
		int mainZn = 36;
		for (int i = 1; i <= mainZn; i++)
		{
			Set<Integer> units_i = units(i);
			System.out.println("U(" + i + "):\t" + units_i);

			ArrayList<Integer> a_squared = new ArrayList<Integer>();
			ArrayList<Integer> ordA = new ArrayList<Integer>();
			for (int a : units_i)
			{
				a_squared.add(a * a % i);
				ordA.add(orderOfA_UnderMultiplicativeSetUnderZ_n(a, i));
			}
			System.out.println("a^2:\t" + a_squared);
			System.out.println("ord(a):\t" + ordA);

			if (i > 2)
			{

				int size = units_i.size();

				int half = (Integer) units_i.toArray()[(size + 1) / 2];
				int ordHalf = orderOfA_UnderMultiplicativeSetUnderZ_n(half, i);
				System.out.println("ordHalf=" + ordHalf + "  size=" + size);

			}

			System.out.println();

		}
		// Set<Integer> u5 = units(5);

		// System.out.println(generateMultiplicativSetUnderZ_n(7, 10));

		System.out.println();
		System.out.println();

		int unum = mainZn;

		Set<Integer> un = units(unum);
		System.out.println(unum + ":\t" + un);
		System.out.println();
		for (int x : un)
			System.out.println(x + ": \t" + generateMultiplicativeSetUnderZ_n(x, unum));


		System.out.println();
		System.out.println();
		System.out.println(generateMultiplicativeSetUnderZ_n(4, 703));// 2
		System.out.println(generateMultiplicativeSetUnderZ_n(8, 703));// 3
		System.out.println(generateMultiplicativeSetUnderZ_n(64, 703));// 6
		System.out.println();
		System.out.println(generateMultiplicativeSetUnderZ_n(64, 703));// 2*3
		System.out.println(generateMultiplicativeSetUnderZ_n(512, 703));// 3*3
		System.out.println(generateMultiplicativeSetUnderZ_n(262144, 703));// 3
		

		System.out.println();
		System.out.println();
	}
}
